package com.bacon.gui;

import com.bacon.Aplication;
import com.bacon.ProgAction;
import com.bacon.Utiles;
import com.bacon.domain.Presentation;
import com.bacon.domain.Product;
import com.bacon.gui.util.TableSelectCellRenderer;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.bx.gui.ListSelection;
import org.bx.gui.MyDefaultTableModel;
import org.dz.PanelCaptura;

/**
 *
 * @author lrod
 */
public class PanelAddItem extends PanelCaptura implements TableModelListener {

    private final Aplication app;
    private ProgAction acAddUnit;
    private MyDefaultTableModel model;
    private ListSelection listaSeleccion;

    /**
     * Creates new form PanelAddItem
     *
     * @param app
     */
    public PanelAddItem(Aplication app) {
        this.app = app;
        initActions();
        initComponents();
        createComponents();
    }

    private void createComponents() {

        String[] colNames = {"Sel", "Codigo", "Producto", "Presentacion", "Cantidad"};
        ArrayList<String> asList = new ArrayList<>(Arrays.asList(colNames));
//        asList.add(loc);
        model = new MyDefaultTableModel(asList.toArray(), 0);
        tableProducts.setModel(model);
        tableProducts.getTableHeader().setReorderingAllowed(false);
        listaSeleccion = new ListSelection(tableProducts);

        tableProducts.setRowHeight(22);
        tableProducts.getTableHeader().addMouseListener(listaSeleccion);
        model.addTableModelListener(this);

        int[] colW = {5, 20, 120, 100, 20};

        for (int i = 0; i < tableProducts.getColumnCount(); i++) {
            tableProducts.getColumnModel().getColumn(i).setCellRenderer(new TableSelectCellRenderer(true));
            tableProducts.getColumnModel().getColumn(i).setMinWidth(colW[i]);
            tableProducts.getColumnModel().getColumn(i).setPreferredWidth(colW[i]);
        }

        tableProducts.getColumnModel().getColumn(0).setHeaderRenderer(listaSeleccion);
        tableProducts.getColumnModel().getColumn(0).setCellEditor(tableProducts.getDefaultEditor(Boolean.class));

        loadProducts();

    }

    private void loadProducts() {
        SwingWorker sw = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                ArrayList<Product> productos = app.getControl().getProductsList("", "");
                System.out.println("exp = " + productos.size());
                for (int i = 0; i < productos.size(); i++) {
                    Product p = productos.get(i);
                    ArrayList<Presentation> press = app.getControl().getPresentationsByProduct(p.getId());
                    for (int j = 0; j < press.size(); j++) {
                        model.addRow(new Object[]{false, p.getCode(), p.getName(), press.get(j).getName(), 0});
                    }
                    
                }
                return true;
            }
        };
        sw.execute();

    }

    public final void initActions() {
        ImageIcon icon = new ImageIcon(app.getImgManager().getImagen(app.getFolderIcons() + "add1.png", 24, 24));
        acAddUnit = new ProgAction("", icon, "Agregar medida", 'm') {
            public void actionPerformed(ActionEvent e) {
                System.out.println("action:" + e);
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        regName = new org.dz.Registro(BoxLayout.X_AXIS, "Nombre", "", 70);
        regMeseure = new org.dz.Registro(BoxLayout.X_AXIS, "Medida", new Object[1], acAddUnit,70);
        regInitial = new org.dz.Registro(BoxLayout.X_AXIS, "Inicial", "", 70);
        registro4 = new org.dz.Registro(BoxLayout.X_AXIS, "Stock", "", 70);
        registro5 = new org.dz.Registro(BoxLayout.X_AXIS, "Stock min", "", 70);
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProducts = new javax.swing.JTable();
        registro6 = new org.dz.Registro(BoxLayout.X_AXIS, "Costo", "", 70);
        registro7 = new org.dz.Registro(BoxLayout.X_AXIS, "Precio", "", 70);

        regMeseure.setLabelFont(new Font("arial",0,11));

        tableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableProducts);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(regName, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addComponent(regMeseure, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(regInitial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(registro4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(registro5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(registro6, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registro7, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {regInitial, regMeseure, regName, registro4, registro5, registro6, registro7});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(regName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(regMeseure, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(regInitial, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registro4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registro5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registro6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registro7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 21, Short.MAX_VALUE)))
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private org.dz.Registro regInitial;
    private org.dz.Registro regMeseure;
    private org.dz.Registro regName;
    private org.dz.Registro registro4;
    private org.dz.Registro registro5;
    private org.dz.Registro registro6;
    private org.dz.Registro registro7;
    private javax.swing.JTable tableProducts;
    // End of variables declaration//GEN-END:variables

    @Override
    public void reset() {

    }

    @Override
    public void tableChanged(TableModelEvent e) {
        updateTabla();
    }

    private void updateTabla() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                tableProducts.updateUI();
            }
        });
    }

    private ArrayList<String> getSelecteds() {
        ArrayList<String> prods = new ArrayList<>();
        int[] selectedsRows = getSelectedsRows();
        for (int i = 0; i < selectedsRows.length; i++) {
            prods.add(model.getValueAt(selectedsRows[i], 1).toString());
        }
        return prods;
    }
    
    public int[] getSelectedsRows() {
        int[] sel = new int[model.getRowCount()];
        Arrays.fill(sel, -1);
        for (int i = 0; i < model.getRowCount(); i++) {
            if ((Boolean) model.getValueAt(i, 0) == true) {
                sel[i] = i;
            }
        }
        sel = Utiles.truncar(sel, 0, Integer.MAX_VALUE);
        Arrays.sort(sel);
        return sel;
    }
}

<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE DAOConfiguration [

	<!ELEMENT DAOConfiguration (DAOStatements+)>

	<!ELEMENT DAOStatements (SQLStatement+)>
	<!ATTLIST DAOStatements
		database CDATA #REQUIRED
	>
 
	<!ELEMENT SQLStatement (SQLFragment+)>
	<!ATTLIST SQLStatement
		method (COUNT_TABLE|GET_ITEMS_REFERENCE|CHECK_TABLE|CHECK_TABLE_USERS|GET_MAX_ITEMID
                    |CREATE_USERS_TABLE|INSERT_USER|INSERT_USER_FULL|UPDATE_USER_USERNAME
                    |UPDATE_USER_ACCESS|UPDATE_USER_PASSWORD|DELETE_USER|GET_USER
                    |GET_USER_LIMIT|CHECK_USER_PASSWORD|DROP_TABLE|TRUNCATE_TABLE
                    |CREATE_ROLES_TABLE|INSERT_ROL|UPDATE_ROL|DELETE_ROL|GET_ROLES_LIST
                    |CREATE_PERMISSIONS_TABLE|INSERT_PERMISSION|UPDATE_PERMISSION|DELETE_PERMISSION|GET_PERMISSIONS_LIST
                    |CREATE_PERMISSION_ROLE_TABLE|GET_PERMISSION_ROLE_LIST|DELETE_PERMISSION_ROLE|INSERT_PERMISSION_ROLE
                    |GET_PERMISSION_BY_ROLE_LIST|GET_ROLE|CREATE_ROLE_USER_TABLE|INSERT_ROLE_USER|GET_ROLE_USER_LIST
                    |DELETE_ROLE_USER|HAS_PERMISSION|GET_USER_ROLE
                    |CREATE_PERSONS_TABLE
                    |GET_PERSON|GET_PERSON_LIMIT|INSERT_PERSON|UPDATE_PERSON|GET_ID_PERSON|DELETE_PERSON|DELETE_PERSON_WHERE
                    |CREATE_CONFIG_TABLE|GET_CONFIG|DELETE_CONFIG|UPDATE_CONFIG|EXIST_CONFIG
                    |ADD_CONFIG
                    |EXIST_CLAVE|GET_MAX_ID|COUNT_TABLE2
                    |CREATE_PRODUCTS_TABLE|ADD_PRODUCT|GET_PRODUCT|DELETE_PRODUCT|UPDATE_PRODUCT
                    |CREATE_INGREDIENTS_TABLE|ADD_INGREDIENT|GET_INGREDIENT|DELETE_INGREDIENT|UPDATE_INGREDIENT
                    |CREATE_PRODUCT_INGREDIENT_TABLE|GET_INGREDIENTS_BY_PRODUCT
                    |CREATE_ADDITIONALS_TABLE|ADD_ADDITIONAL|GET_ADDITIONAL|DELETE_ADDITIONAL|UPDATE_ADDITIONAL
                    |CREATE_INVOICES_TABLE|ADD_INVOICE|GET_INVOICE|DELETE_INVOICE|UPDATE_INVOICE
                    |CREATE_WAITERS_TABLE|CREATE_TABLES_TABLE|CREATE_INVOICE_PRODUCT_TABLE
                    |GET_WAITERS|GET_TABLES|ADD_INVOICE_PRODUCT|GET_INVOICE_PRODUCT
                    |CREATE_ADDITIONAL_PRODUCT_TABLE|ADD_ADDITIONAL_PRODUCT|GET_ADDITIONAL_PRODUCT
                    |CREATE_EXCLUSION_PRODUCT_TABLE|ADD_EXCLUSION_PRODUCT|GET_EXCLUSION_PRODUCT
                    |GET_FIRST_REGISTRO|GET_LAST_REGISTRO
                    |CREATE_CLIENTS_TABLE|GET_CLIENT|ADD_CLIENT|DELETE_CLIENT|UPDATE_CLIENT
                    |CREATE_PRESENTATION_PRODUCT_TABLE|GET_PRESENTATIONS_BY_PRODUCT|GET_PRESENTATION_BY_DEFAULT|GET_PRESENTATION
                    |CREATE_CYCLES_TABLE|GET_CYCLE|ADD_CYCLE|DELETE_CYCLE|UPDATE_CYCLE
                    |CREATE_OTHER_PRODUCTS_TABLE|GET_OTHER_PRODUCT|ADD_OTHER_PRODUCT|DELETE_OTHER_PRODUCT
                    |CREATE_INVOICE_OTHER_PRODUCT_TABLE|ADD_INVOICE_OTHER_PRODUCT
                    |GET_CATEGORIES_SORTED
                    
                    
                    ) #REQUIRED
                    
	>

	<!ELEMENT SQLFragment (#PCDATA)>
	<!ATTLIST SQLFragment
		excludeIfNamedParamEmpty (TRUE|FALSE) "FALSE"
	>
]>



<DAOConfiguration>	
    <!-- MYSQL -->
    <DAOStatements database="mysql">
        <SQLStatement method="COUNT_TABLE">
            <SQLFragment>
                SELECT count(*) FROM ({query}) AS counted
            </SQLFragment>
        </SQLStatement>

        <SQLStatement method="CHECK_TABLE">
            <SQLFragment>
                SELECT count(*) FROM {table}
            </SQLFragment>
        </SQLStatement>
		
        <SQLStatement method="CREATE_USERS_TABLE">
            <SQLFragment>
                CREATE TABLE users (
                id INTEGER NOT NULL AUTO_INCREMENT,
                username VARCHAR(100),
                password VARCHAR(100),
                access_level VARCHAR(100),
                createdTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                UNIQUE (username),
                PRIMARY KEY (id)
                );
            </SQLFragment>
        </SQLStatement>
		
        <SQLStatement method="INSERT_USER">
            <SQLFragment>
                INSERT INTO users (username,password,access_level) VALUES (?, ?, ?);
            </SQLFragment>
        </SQLStatement>
		
        <SQLStatement method="INSERT_USER_FULL">
            <SQLFragment>
                INSERT INTO users VALUES (?, ?, ?, ?);
            </SQLFragment>
        </SQLStatement>
		
        <SQLStatement method="UPDATE_USER_USERNAME">
            <SQLFragment>
                UPDATE users SET username = ? WHERE id = ?;
            </SQLFragment>
        </SQLStatement>
		
        <SQLStatement method="UPDATE_USER_ACCESS">
            <SQLFragment>
                UPDATE users SET access_level = ? WHERE id = ?;
            </SQLFragment>
        </SQLStatement>
		
        <SQLStatement method="UPDATE_USER_PASSWORD">
            <SQLFragment>
                UPDATE users SET password = ? WHERE id = ?;
            </SQLFragment>
        </SQLStatement>
		
        <SQLStatement method="DELETE_USER">
            <SQLFragment>
                DELETE FROM users WHERE username = ?;
            </SQLFragment>
        </SQLStatement>
		
        <SQLStatement method="GET_USER_LIMIT">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                id, username, access_level
                FROM users
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby}
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                LIMIT ?, ?
            </SQLFragment>
        </SQLStatement>
		
        <SQLStatement method="GET_USER">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                id, username, access_level
                FROM users
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby}
            </SQLFragment>
        </SQLStatement>
		
        <SQLStatement method="CHECK_USER_PASSWORD">
            <SQLFragment>
                SELECT password, id, access_level FROM users WHERE username = ? AND STRCMP(BINARY password, ?) = 0;
            </SQLFragment>
        </SQLStatement>		
        
        <SQLStatement method="CREATE_ROLES_TABLE">
            <SQLFragment>
                CREATE TABLE roles (
                id INTEGER NOT NULL AUTO_INCREMENT,
                name VARCHAR(100),
                display_name VARCHAR(255),
                description VARCHAR(255),
                createdTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                UNIQUE (name),
                PRIMARY KEY (id)
                );
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_ROLES_LIST">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                *
                FROM roles
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby} 
            </SQLFragment>
            
        </SQLStatement>
        
        <SQLStatement method="GET_ROLE">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                id, name
                FROM roles
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="INSERT_ROL">
            <SQLFragment>
                INSERT INTO roles (name,display_name,description ) VALUES (?, ?, ?);
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="UPDATE_ROL">
            <SQLFragment>
                UPDATE roles SET 
                name= ?,
                display_name= ?,
                description= ?
                WHERE id = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="DELETE_ROL">
            <SQLFragment>
                DELETE FROM roles WHERE name = ?;
            </SQLFragment>
        </SQLStatement>
        
        
        <SQLStatement method="CREATE_PERMISSIONS_TABLE">
            <SQLFragment>
                CREATE TABLE permissions (
                id INTEGER NOT NULL AUTO_INCREMENT,
                name VARCHAR(100),
                display_name VARCHAR(255),
                description VARCHAR(255),
                UNIQUE (name),
                PRIMARY KEY (id)
                );
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="INSERT_PERMISSION">
            <SQLFragment>
                INSERT INTO permissions (name,display_name,description) VALUES (?, ?, ?);
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="UPDATE_PERMISSION">
            <SQLFragment>
                UPDATE permissions SET 
                name= ?,
                display_name= ?,
                description= ?
                WHERE id = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="DELETE_PERMISSION">
            <SQLFragment>
                DELETE FROM permissions WHERE id = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_PERMISSIONS_LIST">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                *
                FROM permissions
            </SQLFragment>            
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby} 
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="CREATE_PERMISSION_ROLE_TABLE">
            <SQLFragment>
                CREATE TABLE permission_role (
                permission_id INTEGER NOT NULL,
                role_id INTEGER NOT NULL,
                FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE ON UPDATE CASCADE,
                FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE ON UPDATE CASCADE
                );
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="INSERT_PERMISSION_ROLE">
            <SQLFragment>
                INSERT INTO permission_role VALUES (?, ?);
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_PERMISSION_ROLE_LIST">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                *
                FROM permission_role
            </SQLFragment>            
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby} 
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_PERMISSION_BY_ROLE_LIST">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                p.id, 
                p.name,
                p.display_name,
                p.description
                FROM permissions p, roles r, permission_role pr
            </SQLFragment>            
            <SQLFragment>
                WHERE pr.permission_id=p.id and r.id=pr.role_id and r.id=?
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby} 
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="DELETE_PERMISSION_ROLE">
            <SQLFragment>
                DELETE FROM permission_role WHERE role_id = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="CREATE_ROLE_USER_TABLE">
            <SQLFragment>
                CREATE TABLE role_user (
                user_id INTEGER NOT NULL,
                role_id INTEGER NOT NULL,
                UNIQUE(user_id),
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
                FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE ON UPDATE CASCADE
                );
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="INSERT_ROLE_USER">
            <SQLFragment>
                INSERT INTO role_user VALUES (?, ?);
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_ROLE_USER_LIST">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                *
                FROM role_user
            </SQLFragment>            
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby} 
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="DELETE_ROLE_USER">
            <SQLFragment>
                DELETE FROM role_user WHERE user_id = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="HAS_PERMISSION">
            <SQLFragment>
                SELECT count(*) 
                FROM permission_role pr, role_user ru
                WHERE pr.role_id = ru.role_id AND ru.user_id=? AND pr.permission_id=?
            </SQLFragment>
        </SQLStatement>
        
        
        <SQLStatement method="GET_USER_ROLE">
            <SQLFragment>
                SELECT r.name 
                FROM role_user ru, roles r, users u 
                WHERE ru.role_id = r.id AND u.id=ru.user_id AND u.id=?
            </SQLFragment>
        </SQLStatement>
        
          
                	
        <SQLStatement method="CREATE_PERSONS_TABLE">
            <SQLFragment>
                CREATE TABLE persons (
                id INTEGER AUTO_INCREMENT,
                identification INTEGER NOT NULL UNIQUE,
                firstName1 VARCHAR(255),
                firstName2 VARCHAR(255),
                lastName1 VARCHAR(255),
                lastName2 VARCHAR(255),
                lider INTEGER,					
                cellphone VARCHAR(15),
                profession VARCHAR(255),
                address VARCHAR(255),
                place1 VARCHAR(255),
                typePlace VARCHAR(255),
                neighborhood VARCHAR(255),                
                birthday DATE,
                email VARCHAR(255),
                votingPlace VARCHAR(255),
                votingTable INTEGER,
                witness TINYINT(1) DEFAULT '0',
                jury TINYINT(1) DEFAULT '0',
                volunteer TINYINT(1) DEFAULT '0',
                hardvote TINYINT(1) DEFAULT '0',
                giveVehicle TINYINT(1) DEFAULT '0',
                typeVehicle VARCHAR(255),
                compromise VARCHAR(255),
                photo BLOB DEFAULT NULL,
                createdTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                lastUpdatedTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                PRIMARY KEY (id));
            </SQLFragment>
        </SQLStatement>		
        
        <SQLStatement method="GET_PERSON">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                *
                FROM persons
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby} 
            </SQLFragment>
            
        </SQLStatement>
        
        <SQLStatement method="GET_ID_PERSON">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                identification
                FROM persons
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby} 
            </SQLFragment>
            
        </SQLStatement>
        
        <SQLStatement method="GET_PERSON_LIMIT">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                *
                FROM persons
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby} 
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                LIMIT {start}, {num}
            </SQLFragment>
        </SQLStatement>
        
        
        <SQLStatement method="UPDATE_PERSON">
            <SQLFragment>
                UPDATE persons SET 
                firstName1=?,
                firstName2=?,
                lastName1=?,
                lastName2=?,
                lider=?,
                cellphone=?,
                profession=?,
                address=?,
                place1=?,
                typePlace=?,
                neighborhood=?,                
                birthday=?,
                email=?,
                votingPlace=?,
                votingTable=?,
                witness=?,
                jury=?,
                volunteer=?,
                hardvote=?,
                giveVehicle=?,
                typeVehicle=?,
                compromise=?,
                photo=? 
                WHERE identification = ?
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="INSERT_PERSON">
            <SQLFragment>
                INSERT INTO persons (identification,firstName1,firstName2,
                lastName1,lastName2,lider,cellphone,profession,
                address,place1,typePlace,neighborhood,birthday,email,votingPlace,
                votingTable,witness,jury,volunteer,hardvote,giveVehicle,typeVehicle,
                compromise,photo) 
                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
            </SQLFragment>
        </SQLStatement>	
                
        <SQLStatement method="DELETE_PERSON">
            <SQLFragment>
                DELETE FROM persons WHERE identification = ?;
            </SQLFragment>
        </SQLStatement>		
        
        <SQLStatement method="DELETE_PERSON_WHERE">
            <SQLFragment>
                DELETE FROM persons
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>
        </SQLStatement>		
                       
        <SQLStatement method="DROP_TABLE">
            <SQLFragment>
                DROP TABLE {table};
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="TRUNCATE_TABLE">
            <SQLFragment>
                TRUNCATE TABLE {table};
            </SQLFragment>
        </SQLStatement>
       
        <SQLStatement method="CHECK_TABLE_USERS">
            <SQLFragment>
                SELECT count(*) FROM users WHERE 1=1
            </SQLFragment>
        </SQLStatement> 
        
        <SQLStatement method="COUNT_TABLE2">
            <SQLFragment>
                SELECT count(*) FROM ? WHERE 1=1;
            </SQLFragment>
        </SQLStatement>  
        
        <SQLStatement method="CREATE_CONFIG_TABLE">
            <SQLFragment>
                CREATE TABLE config (
                id INTEGER AUTO_INCREMENT,
                code VARCHAR(100) NOT NULL UNIQUE,
                value VARCHAR(255),
                type VARCHAR(255),
                PRIMARY KEY (id));
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="GET_CONFIG">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                *
                FROM config
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>            
        </SQLStatement>
        
        <SQLStatement method="ADD_CONFIG">
            <SQLFragment>
                INSERT INTO config (code,value, type) VALUES (?,?,?)
            </SQLFragment>
            <SQLFragment>
                ON DUPLICATE KEY UPDATE value= VALUES(value), type=VALUES(type)
            </SQLFragment>
        </SQLStatement>        
        
        <SQLStatement method="DELETE_CONFIG">
            <SQLFragment>
                DELETE FROM config WHERE code  = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="UPDATE_CONFIG">
            <SQLFragment>
                UPDATE config SET 
                value=?,
                type=? 
                WHERE code = ?
            </SQLFragment>
        </SQLStatement>    
        
        <SQLStatement method="EXIST_CONFIG">
            <SQLFragment>
                SELECT count(code) FROM config WHERE code=?;
            </SQLFragment>
        </SQLStatement>    
        
        <SQLStatement method="EXIST_CLAVE">
            <SQLFragment>
                SELECT count({query}) FROM {table} WHERE {query}={key};
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_MAX_ID">
            <SQLFragment>
                SELECT max(id) FROM {table};
            </SQLFragment>
        </SQLStatement>
        
        
        
        <SQLStatement method="CREATE_PRODUCTS_TABLE">
            <SQLFragment>
                CREATE TABLE products(
                id INTEGER AUTO_INCREMENT,
                name VARCHAR(255) NOT NULL UNIQUE,
                code VARCHAR(255) NOT NULL UNIQUE,      
                description VARCHAR(500),
                price DECIMAL(20,2),
                variable TINYINT(1),
                image VARCHAR(255),
                category VARCHAR(25),                
                PRIMARY KEY (id)
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="ADD_PRODUCT">
            <SQLFragment>

                INSERT INTO products (name,code, description, price, image, category, variable) VALUES (?,?,?,?,?,?,?);
            </SQLFragment>
        </SQLStatement>        
        
        <SQLStatement method="GET_PRODUCT">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                * FROM products
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby}
            </SQLFragment>        
        </SQLStatement>
        
        <SQLStatement method="DELETE_PRODUCT">
            <SQLFragment>
                DELETE FROM products WHERE code = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="UPDATE_PRODUCT">
            <SQLFragment>
                UPDATE products SET 
                name=?,                
                category=?,
                description=?,
                price=?,
                image=?,
                variable=? 
                WHERE code = ?
            </SQLFragment>
        </SQLStatement> 
        
        <SQLStatement method="CREATE_INGREDIENTS_TABLE">
            <SQLFragment>
                CREATE TABLE ingredients(
                id INTEGER AUTO_INCREMENT,
                name VARCHAR(255) NOT NULL UNIQUE,
                code VARCHAR(255) NOT NULL UNIQUE,      
                medida VARCHAR(25),                
                PRIMARY KEY (id)
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="ADD_INGREDIENT">
            <SQLFragment>
                INSERT INTO ingredients (name,code,medida) VALUES (?,?,?);
            </SQLFragment>
        </SQLStatement>        
        
        <SQLStatement method="GET_INGREDIENT">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                * FROM ingredients
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby}
            </SQLFragment>        
        </SQLStatement>
        
        <SQLStatement method="DELETE_INGREDIENT">
            <SQLFragment>
                DELETE FROM ingredients WHERE code = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="UPDATE_INGREDIENT">
            <SQLFragment>
                UPDATE ingredients SET 
                name=?,                
                medida=? 
                WHERE code = ?
            </SQLFragment>
        </SQLStatement> 
        
        
        
        <SQLStatement method="CREATE_PRODUCT_INGREDIENT_TABLE">
            <SQLFragment>
                CREATE TABLE product_ingredient (
                product_id INTEGER NOT NULL,
                ingredient_id INTEGER NOT NULL,
                cantidad INTEGER,
                opcional TINYINT(1) DEFAULT '0',
                FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE ON UPDATE CASCADE,
                FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE ON UPDATE CASCADE
                );
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_INGREDIENTS_BY_PRODUCT">
            <SQLFragment>
                SELECT i.id, i.code,i.name,i.medida, pi.cantidad, pi.opcional 
                FROM product_ingredient pi, ingredients i, products p  
                WHERE 
                pi.ingredient_id=i.id 
                and pi.product_id=p.id 
                and p.code = ?
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="CREATE_ADDITIONALS_TABLE">
            <SQLFragment>
                CREATE TABLE additionals(
                id INTEGER AUTO_INCREMENT,
                ingredient_id INTEGER NOT NULL,
                precio DECIMAL(20,2),                
                PRIMARY KEY (id)
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="ADD_ADDITIONAL">
            <SQLFragment>
                INSERT INTO additionals (producto_id,precio) VALUES (?,?);
            </SQLFragment>
        </SQLStatement>        
        
        <SQLStatement method="GET_ADDITIONAL">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>                
                a.id, i.name,i.code,i.medida,a.precio
            </SQLFragment>
            <SQLFragment>
                FROM ingredients i, additionals a                
            </SQLFragment>
            <SQLFragment>
                where i.id=a.ingredient_id
            </SQLFragment>    
            
        </SQLStatement>
        
        <SQLStatement method="DELETE_ADDITIONAL">
            <SQLFragment>
                DELETE FROM additionals WHERE id = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="UPDATE_ADDITIONAL">
            <SQLFragment>
                UPDATE additionals SET                 
                precio=?
                WHERE id = ?
            </SQLFragment>
        </SQLStatement> 
        
        
        
        <SQLStatement method="CREATE_INVOICES_TABLE">
            <SQLFragment>
                CREATE TABLE invoices(
                id INTEGER AUTO_INCREMENT,
                code VARCHAR(255) NOT NULL UNIQUE,
                sale_date DATETIME,                
                deliveryType INTEGER, 
                value DECIMAL(20,2),
                valueDelivery DECIMAL(20,2),
                discount DECIMAL,                               
                idClient VARCHAR(11),
                idMesero INTEGER,
                mesa INTEGER,
                ciclo INTEGER,
                notes VARCHAR(500),
                isservice TINYINT(1) NOT NULL DEFAULT '0',
                service_porc DECIMAL(3,1) NOT NULL DEFAULT '0',
                PRIMARY KEY (id)
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="ADD_INVOICE">
            <SQLFragment>
                INSERT INTO invoices (code,sale_date,deliveryType,value,valueDelivery,discount,idClient,idMesero,mesa,ciclo,notes, isservice, service_porc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?);
            </SQLFragment>
        </SQLStatement>        
        
        <SQLStatement method="GET_INVOICE">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                * FROM invoices
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby}
            </SQLFragment>        
        </SQLStatement>
        
        <SQLStatement method="DELETE_INVOICE">
            <SQLFragment>
                DELETE FROM invoices WHERE code = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="UPDATE_INVOICE">
            <SQLFragment>
                UPDATE invoices SET 
                sale_date=?,                
                deliveryType=?,
                value=?,
                valueDelivery=?,
                discount=?,
                idClient=?,
                idMesero=?,
                mesa=?,
                ciclo=?,
                isservice=?,
                service_porc=?
                WHERE code = ?
            </SQLFragment>
        </SQLStatement> 
                        
        <SQLStatement method="CREATE_WAITERS_TABLE">
            <SQLFragment>
                CREATE TABLE waiters(
                id INTEGER AUTO_INCREMENT,
                name VARCHAR(255),
                status INTEGER,
                PRIMARY KEY (id)
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="GET_WAITERS">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                * FROM waiters
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby}
            </SQLFragment>        
        </SQLStatement>
        
        <SQLStatement method="CREATE_TABLES_TABLE">
            <SQLFragment>
                CREATE TABLE tables(
                id INTEGER AUTO_INCREMENT,
                name VARCHAR(255),
                status INTEGER,
                PRIMARY KEY (id)
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="GET_TABLES">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                * FROM tables
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby}
            </SQLFragment>        
        </SQLStatement>
        
        <SQLStatement method="CREATE_INVOICE_PRODUCT_TABLE">
            <SQLFragment>
                CREATE TABLE invoice_product(
                id INTEGER AUTO_INCREMENT,
                id_invoice INTEGER NOT NULL,
                id_product INTEGER NOT NULL,
                id_presentation INTEGER NOT NULL,
                price DECIMAL(20,2),
                cantidad INTEGER,
                PRIMARY KEY (id)                
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="ADD_INVOICE_PRODUCT">
            <SQLFragment>
                INSERT INTO invoice_product (id_invoice, id_product, id_presentation, price, cantidad) VALUES (?,?,?,?,?);
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_INVOICE_PRODUCT">
            <SQLFragment>
                SELECT p.id, p.name, p.code, p.description, p.price, p.variable, p.image, p.category, ip.price, ip.cantidad, ip.id, ip.id_presentation
                FROM products p, invoice_product ip, invoices i 
                WHERE p.id = ip.id_product AND ip.id_invoice = i.id  AND i.code=?
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="CREATE_ADDITIONAL_PRODUCT_TABLE">
            <SQLFragment>
                CREATE TABLE additional_product(
                id INTEGER AUTO_INCREMENT,
                id_product INTEGER NOT NULL,
                id_additional INTEGER NOT NULL,                
                price DECIMAL(20,2),
                cantidad INTEGER,
                PRIMARY KEY (id)          
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="ADD_ADDITIONAL_PRODUCT">
            <SQLFragment>
                INSERT INTO additional_product (id_product, id_additional, price, cantidad) VALUES (?,?,?,?);
            </SQLFragment>
        </SQLStatement>
     
        <SQLStatement method="GET_ADDITIONAL_PRODUCT">
            <SQLFragment>
                SELECT a.id, i.name, i.code, i.medida, a.precio, ap.cantidad
                FROM ingredients i, additionals a, additional_product ap
                WHERE ap.id_additional=a.id AND a.ingredient_id=i.id AND ap.id_product=?
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="CREATE_EXCLUSION_PRODUCT_TABLE">
            <SQLFragment>
                CREATE TABLE exclusion_product(
                id INTEGER AUTO_INCREMENT,
                id_product INTEGER NOT NULL,
                id_ingredient INTEGER NOT NULL,                
                PRIMARY KEY (id)          
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="ADD_EXCLUSION_PRODUCT">
            <SQLFragment>
                INSERT INTO exclusion_product (id_product, id_ingredient) VALUES (?,?);
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_EXCLUSION_PRODUCT">
            <SQLFragment>
                SELECT i.id, i.name, i.code, i.medida
                FROM ingredients i, exclusion_product ep
                WHERE i.id= ep.id_ingredient AND ep.id_product=?
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_FIRST_REGISTRO">
            <SQLFragment>
                SELECT min({query}) FROM {table} ORDER BY {query};
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_LAST_REGISTRO">
            <SQLFragment>
                SELECT max({query}) FROM {table} ORDER BY {query};
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="CREATE_CLIENTS_TABLE">
            <SQLFragment>
                CREATE TABLE clients (
                id INTEGER(10) NOT NULL AUTO_INCREMENT,
                cellphone VARCHAR(15) UNIQUE,                
                names VARCHAR(255),
                lastname VARCHAR(255),
                address VARCHAR(255),
                lastUpdatedTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,                
                PRIMARY KEY (id)
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>		
        
        <SQLStatement method="GET_CLIENT">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                * FROM clients
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby}
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="ADD_CLIENT">
            <SQLFragment>
                INSERT INTO clients (cellphone,names,lastname, address) 
                VALUES (?,?,?,?) ON DUPLICATE KEY UPDATE cellphone=cellphone;
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="DELETE_CLIENT">
            <SQLFragment>
                DELETE FROM clients WHERE cellphone = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="UPDATE_CLIENT">
            <SQLFragment>
                UPDATE clients SET         
                names=?,        
                lastname=?,
                address=?
                WHERE cellphone = ?
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="CREATE_PRESENTATION_PRODUCT_TABLE">
            <SQLFragment>
                CREATE TABLE presentation_product (
                id INTEGER AUTO_INCREMENT,
                product_id INTEGER NOT NULL,
                serie INTEGER NOT NULL,
                name VARCHAR(100),
                price DECIMAL(20,2),
                isdefault TINYINT(1) DEFAULT '0',
                PRIMARY KEY (id),
                FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE ON UPDATE CASCADE                
                );
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_PRESENTATIONS_BY_PRODUCT">
            <SQLFragment>
                SELECT ps.id, ps.product_id, ps.serie,ps.name,ps.price,ps.isdefault
                FROM presentation_product ps
                WHERE 
                ps.product_id = ?
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_PRESENTATION_BY_DEFAULT">
            <SQLFragment>
                SELECT ps.id, ps.product_id, ps.serie,ps.name,ps.price,ps.isdefault
                FROM presentation_product ps
                WHERE 
                ps.product_id = ? AND isdefault = ?
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="GET_PRESENTATION">
            <SQLFragment>
                SELECT ps.id, ps.product_id, ps.serie,ps.name,ps.price,ps.isdefault
                FROM presentation_product ps
                WHERE ps.id = ?
            </SQLFragment>
        </SQLStatement>
        
        
        <SQLStatement method="CREATE_CYCLES_TABLE">
            <SQLFragment>
                CREATE TABLE cycles (
                id INTEGER AUTO_INCREMENT,
                init TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                end TIMESTAMP,
                saldo DECIMAL(20,2),
                status TINYINT(2) DEFAULT 1,                                
                lastUpdatedTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,                
                PRIMARY KEY (id)
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>		
        
        <SQLStatement method="GET_CYCLE">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                * FROM cycles
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby}
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="ADD_CYCLE">
            <SQLFragment>
                INSERT INTO cycles (saldo) 
                VALUES (?)
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="DELETE_CYCLE">
            <SQLFragment>
                DELETE FROM cycles WHERE id = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="UPDATE_CYCLE">
            <SQLFragment>
                UPDATE cycles SET         
                end=?,
                status=?
                WHERE id = ?
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="CREATE_OTHER_PRODUCTS_TABLE">
            <SQLFragment>
                CREATE TABLE other_products(
                id INTEGER AUTO_INCREMENT,
                name VARCHAR(255) NOT NULL UNIQUE,                
                description VARCHAR(500),
                price DECIMAL(20,2),                
                PRIMARY KEY (id)
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>	
        
        <SQLStatement method="ADD_OTHER_PRODUCT">
            <SQLFragment>
                INSERT INTO other_products (name, description, price) VALUES (?,?,?)
            </SQLFragment>
            <SQLFragment>
                ON DUPLICATE KEY UPDATE description=VALUES(description), price=VALUES(price)                
            </SQLFragment>
        </SQLStatement>        
        
        <SQLStatement method="GET_OTHER_PRODUCT">
            <SQLFragment>
                SELECT
            </SQLFragment>
            <SQLFragment>
                * FROM other_products
            </SQLFragment>
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                WHERE {where}
            </SQLFragment>    
            <SQLFragment excludeIfNamedParamEmpty="TRUE">
                ORDER BY {orderby}
            </SQLFragment>        
        </SQLStatement>
        
        <SQLStatement method="DELETE_OTHER_PRODUCT">
            <SQLFragment>
                DELETE FROM other_products WHERE id = ?;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="CREATE_INVOICE_OTHER_PRODUCT_TABLE">
            <SQLFragment>
                CREATE TABLE invoice_otherproduct(
                id INTEGER AUTO_INCREMENT,
                id_invoice INTEGER NOT NULL,
                id_otherproduct INTEGER NOT NULL,
                cantidad INTEGER,
                PRIMARY KEY (id)                
                )ENGINE=InnoDB DEFAULT CHARSET=latin1;
            </SQLFragment>
        </SQLStatement>
        
        <SQLStatement method="ADD_INVOICE_OTHER_PRODUCT">
            <SQLFragment>
                INSERT INTO invoice_otherproduct (id_invoice, id_otherproduct, cantidad) VALUES (?,?,?);
            </SQLFragment>
        </SQLStatement>
                
        <SQLStatement method="GET_CATEGORIES_SORTED">
            <SQLFragment>
                SELECT p.category, sum(ip.cantidad) as cantidad
                FROM invoice_product ip, products p
                WHERE ip.id_product = p.id
                GROUP BY p.category
                ORDER BY cantidad DESC                
            </SQLFragment>
        </SQLStatement>

        
                                 
    </DAOStatements>
</DAOConfiguration>









